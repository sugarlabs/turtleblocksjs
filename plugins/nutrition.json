{"GLOBALS": "calories = 0;protein = 0;carbohydrate = 0;fiber = 0;fat = 0;apiKey = \"wsKEYiHKI5drrjzG8kDObkbGnOUovEqsDkZCmQpF\";\tFood = {'sugar' : '19436', 'apple' : '09005', 'banana' : '09040', 'orange' : '09200', 'bread' : '18019', 'corn' : '20014', 'potato' : '11352', 'sweetpotato' : '11505', 'tomato' : '11529', 'broccoli' : '11090', 'riceandbeans' : '36405', 'tamale' : '36056', 'cheese' : '01005', 'chicken' : '05000', 'fish' : '15027', 'beef' : '13821', 'cake' : '18127', 'cookie' : '18171', 'water' : '14411', 'noodles' : '10001', 'noodle' : '10001', 'butter' : '10002', 'yoghurt' : '01116', 'milk' : '08510', 'snacks' : '19002', 'popcorn' : '19040'};get_response = function(name){    name = name.toLowerCase();    if(Food[name])    {        apiURL = 'https://api.data.gov/usda/ndb/nutrients/?format=json&api_key=' + apiKey + '&nutrients=205&nutrients=204&nutrients=208&nutrients=203&nutrients=291&ndbno='+ Food[name]   ;\t    }    else    {        return 0;    }    if (block.cacheFor === apiURL && block.cache !== undefined) {\t    response = block.cache;\t}\telse {        try {\t        request = new XMLHttpRequest();\t        request.open('GET', apiURL, false);\t        request.send(null);\t        \t        response = request.responseText;\t        response = JSON.parse(response);\t        }\t    catch (e) {\t        logo.errorMsg('Could not connect to  API', blk);\t    }\t}\t    return response;};", "HIGHLIGHTSTROKECOLORS": {"nutrition": "#000000", "eatme": "#000000"}, "ARGPLUGINS": {"fiber": "var block = logo.blocks.blockList[blk];var conns = block.connections;block.value = fiber;", "get_fiber": "var block = logo.blocks.blockList[blk];var conns = block.connections;response = get_response(logo.parseArg(logo, turtle, conns[1]));if(response != 0){    block.value = response['report']['foods'][0]['nutrients'][4]['value'];}else{    block.value =\"Sorry! no information about this food\";}", "get_fat": "var block = logo.blocks.blockList[blk];var conns = block.connections;response = get_response(logo.parseArg(logo, turtle, conns[1]));if(response != 0){    block.value = response['report']['foods'][0]['nutrients'][1]['value'];}else{    block.value =\"Sorry! no information about this food\";}", "carbohydrates": "var block = logo.blocks.blockList[blk];var conns = block.connections;block.value = carbohydrate;", "calories": "var block = logo.blocks.blockList[blk];var conns = block.connections;block.value = calories;", "fat": "var block = logo.blocks.blockList[blk];var conns = block.connections;block.value = fat;", "get_carbohydrates": "var block = logo.blocks.blockList[blk];var conns = block.connections;response = get_response(logo.parseArg(logo, turtle, conns[1]));if(response != 0){    block.value = response['report']['foods'][0]['nutrients'][2]['value'];}else{    block.value =\"Sorry! no information about this food\";}", "get_calories": "var block = logo.blocks.blockList[blk];var conns = block.connections;res = get_response(logo.parseArg(logo, turtle, conns[1]));if(res != 0){    block.value = res['report']['foods'][0]['nutrients'][3]['value'];}else{    block.value =\"Sorry! no information about this food\";}", "protein": "var block = logo.blocks.blockList[blk];var conns = block.connections;block.value = protein;", "get_protein": "var block = logo.blocks.blockList[blk];var conns = block.connections;response = get_response(logo.parseArg(logo, turtle, conns[1]));if(response != 0){    block.value = response['report']['foods'][0]['nutrients'][0]['value'];}else{    block.value =\"Sorry! no information about this food\";}"}, "PARAMETERPLUGINS": {"protein": "value = protein;", "fiber": "value = fiber;", "calories": "value = calories;", "carbohydrates": "value = carbohydrates;", "fat": "value = fat;"}, "FLOWPLUGINS": {"eat": "var block = logo.blocks.blockList[blk]; var conns = block.connections;var checkFloat = function(value) {\tif (value == '--')\t\treturn '0';\telse return value;};console.log();var input = logo.parseArg(logo, turtle, conns[1]);input = input.toLowerCase();if(Food[input]){    var blockFoodData = get_response(input);    var i = blockFoodData['report']['foods'][0]['nutrients'][0]['value'];    i = checkFloat(i);    protein +=  parseFloat(i);    i = blockFoodData['report']['foods'][0]['nutrients'][3]['value'];    i = checkFloat(i);    calories += parseFloat(i);    i = blockFoodData['report']['foods'][0]['nutrients'][2]['value'];    i = checkFloat(i);    carbohydrate += parseFloat(i);    i = blockFoodData['report']['foods'][0]['nutrients'][4]['value'];    i = checkFloat(i);    fiber += parseFloat(i);    i = blockFoodData['report']['foods'][0]['nutrients'][1]['value'];    i = checkFloat(i);    fat += parseFloat(i);}else{    logo.textMsg(JSON.stringify(\"Sorry! no information about this food\"));}", "digest": "var block = logo.blocks.blockList[blk]; var conns = block.connections;var checkFloat = function(value) {\tif (value == '--')\t\treturn '0';\telse return value;};calories = 0;protein = 0;carbohydrate = 0;fiber = 0;fat = 0;"}, "PALETTEHIGHLIGHTCOLORS": {"nutrition": "#ffb1b3", "eatme": "#FFFFFF"}, "PALETTEPLUGINS": {"nutrition": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"55\" height=\"55\" viewBox=\"0 0 55 55\"><g transform=\"matrix(.17664 0 0 .17664 5.327 2.929)\" fill=\"none\" stroke=\"#fff\" stroke-linecap=\"round\" stroke-width=\"8.492\"><path d=\"m4.109 146.44c-4.866-30.845 7.585-67.26 30.909-88.02 19.819-17.643 53.962-15.281 80.15-21.569 14.601-3.506 41.696-9.16 56.36-5.944 26.19 5.742 40.579 17.94 58.801 41.645 10.05 13.07 15.215 35.519 17.245 51.883 5.296 42.693-41.793 122.62-51.33 130.73-12.287 10.457-41.758 13.398-59.729 21.539-9.744 4.414-45.527-2.479-55.56-6.178-19.01-7.01-68.21-69.33-76.845-124.08z\"/><path d=\"m77.16 62.47c0 0 22.54 8.764 34.35 8.96 17.02.283 48.784-11.947 48.784-11.947\"/><path d=\"m113 70.43c0 0 10.1-56.838 28.872-68.2 4.192-2.537 10.515 2.713 12.943 6.969 2.057 3.606 2.857 9.999-.498 12.445-2.505 1.826-6.954-4.852-8.96-2.489-6.242 7.355-18.418 47.788-18.418 47.788\"/></g></svg>", "eatme": "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"55\" height=\"55\" enable-background=\"new 0 0 55 55\" viewBox=\"0 0 55 55\"><g display=\"inline\" fill=\"none\" stroke=\"#fff\" stroke-linecap=\"round\" stroke-width=\"3.5\"><path d=\"m51.38 27.597c0 0-11.387 13.04-24 13.04-12.613 0-23.999-13.04-23.999-13.04s8.915-11.234 16.869-11.234c4.418 0 7.13 2.73 7.13 2.73s2.716-2.73 7.132-2.73c7.953-.001 16.869 11.234 16.869 11.234z\"/><path d=\"m3.375 27.597h48\"/></g></svg>"}, "BLOCKPLUGINS": {"fiber": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};show_value('fiber', _('fiber'));", "get_fiber": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};get_eatme('get_fiber', _('get fiber'));", "get_fat": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};get_eatme('get_fat', _('get fat'));", "carbohydrates": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};show_value('carbohydrates', _('carbs'));", "calories": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};show_value('calories', _('calories'));", "fat": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};show_value('fat', _('fat'));", "get_carbohydrates": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};get_eatme('get_carbohydrates', _('get carbs'));", "get_calories": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};get_eatme('get_calories', _('get calories'));", "protein": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};show_value('protein', _('protein'));", "eat": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};eat('eat', _('eat'));", "digest": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};action('digest', _('digest meal'), 20);", "get_protein": "var get_eatme = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['nutrition'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgMathBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var show_value = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.parameterBlock();};var eat = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.oneArgBlock();    block.adjustWidthToLabel();    block.dockTypes[1] = 'anyin';    block.defaults.push('Sugar');};var action = function (name, label) {    var block = new ProtoBlock(name);    block.palette = palettes.dict['eatme'];    blocks.protoBlockDict[name] = block;    block.staticLabels.push(label);    block.adjustWidthToLabel();    block.zeroArgBlock();};get_eatme('get_protein', _('get protein'));"}, "PALETTEFILLCOLORS": {"nutrition": "#c0c0c0", "eatme": "#D5D5D5"}, "PALETTESTROKECOLORS": {"nutrition": "#ef003e", "eatme": "#A0A0A0"}}
